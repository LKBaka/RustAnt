use phf::phf_map;

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum TokenType {
    Nonsense,
    Integer,
    String,
    Colon,
    Dot,
    LBracket,
    RBracket,
    LBrace,
    RBrace,
    Plus,
    Minus,
    Asterisk,
    Slash,
    Assign,
    Eq,
    NotEq,
    Bang,
    BoolNot,
    Var,
    Lt,
    Gt,
    Semicolon,
    Eol,
    Ident,
    Illegal,
    BoolTrue,
    BoolFalse,
    Return,
    LParen,
    RParen,
    If,
    BoolAnd,
    BoolOr,
    Then,
    Elseif,
    Else,
    Func,
    Comma,
    Class,
    Public,
    Private,
    Readonly,
    For,
    In,
    While,
    New,
    Include,
    Import,
    From,
    As,
    Let,
    Try,
    Catch,
    Finally,
    Declare,
    Lib,
    Alias,
    GetClassMember,
    Comment,
    TestPrint,
    Eof,
}

impl TokenType {
    /// 获取 TokenType 的字符串表示
    pub fn to_string(&self) -> &'static str {
        match self {
            TokenType::Colon => ":",
            TokenType::Dot => ".",
            TokenType::LBracket => "[",
            TokenType::RBracket => "]",
            TokenType::LBrace => "{",
            TokenType::RBrace => "}",
            TokenType::Plus => "+",
            TokenType::Minus => "-",
            TokenType::Asterisk => "*",
            TokenType::Slash => "/",
            TokenType::Assign => "=",
            TokenType::Eq => "==",
            TokenType::NotEq => "!=",
            TokenType::Bang => "!",
            TokenType::BoolNot => "Not",
            TokenType::Lt => "<",
            TokenType::Var => "Var",
            TokenType::Gt => ">",
            TokenType::Semicolon => ";",
            TokenType::Eol => "New Line",
            TokenType::BoolTrue => "True",
            TokenType::BoolFalse => "False",
            TokenType::Return => "Return",
            TokenType::LParen => "(",
            TokenType::RParen => ")",
            TokenType::If => "If",
            TokenType::BoolAnd => "And",
            TokenType::BoolOr => "Or",
            TokenType::Then => "Then",
            TokenType::Elseif => "ElseIf",
            TokenType::Else => "Else",
            TokenType::Func => "Func",
            TokenType::Comma => ",",
            TokenType::Class => "Class",
            TokenType::Public => "PUBLIC",
            TokenType::Private => "PRIVATE",
            TokenType::Readonly => "READONLY",
            TokenType::For => "For",
            TokenType::In => "In",
            TokenType::While => "While",
            TokenType::New => "New",
            TokenType::Include => "Include",
            TokenType::Import => "Import",
            TokenType::From => "From",
            TokenType::As => "As",
            TokenType::Let => "Let",
            // TokenType::Throw => "Throw",
            TokenType::Try => "Try",
            TokenType::Catch => "Catch",
            TokenType::Finally => "Finally",
            TokenType::Declare => "Declare",
            TokenType::Lib => "Lib",
            TokenType::Alias => "Alias",
            TokenType::Eof => "End Of File",
            TokenType::Illegal => "Illegal",
            TokenType::Ident => "Identifier",
            TokenType::Nonsense => "Nonsense",
            TokenType::Integer => "Integer",
            TokenType::String => "String",
            TokenType::GetClassMember => "::",
            TokenType::TestPrint => "TestPrint",
            TokenType::Comment => "Comment",
        }
    }
}

pub static TOKEN_TYPE_MAP: phf::Map<&'static str, TokenType> = phf_map! {
    ":" => TokenType::Colon,
    "." => TokenType::Dot,
    "[" => TokenType::LBracket,
    "]" => TokenType::RBracket,
    "{" => TokenType::LBrace,
    "}" => TokenType::RBrace,
    "+" => TokenType::Plus,
    "-" => TokenType::Minus,
    "*" => TokenType::Asterisk,
    "/" => TokenType::Slash,
    "=" => TokenType::Assign,
    "==" => TokenType::Eq,
    "!=" => TokenType::NotEq,
    "<>" => TokenType::NotEq,
    "!" => TokenType::Bang,
    "NOT" => TokenType::BoolNot,
    "VAR" => TokenType::Var,
    "<" => TokenType::Lt,
    ">" => TokenType::Gt,
    ";" => TokenType::Semicolon,
    "\n" => TokenType::Eol,
    "TRUE" => TokenType::BoolTrue,
    "FALSE" => TokenType::BoolFalse,
    "RETURN" => TokenType::Return,
    "(" => TokenType::LParen,
    ")" => TokenType::RParen,
    "IF" => TokenType::If,
    "AND" => TokenType::BoolAnd,
    "OR" => TokenType::BoolOr,
    "THEN" => TokenType::Then,
    "ELSEIF" => TokenType::Elseif,
    "ELSE" => TokenType::Else,
    "FUNC" => TokenType::Func,
    "," => TokenType::Comma,
    "CLASS" => TokenType::Class,
    "PUBLIC" => TokenType::Public,
    "PRIVATE" => TokenType::Private,
    "READONLY" => TokenType::Readonly,
    "FOR" => TokenType::For,
    "IN" => TokenType::In,
    "WHILE" => TokenType::While,
    "NEW" => TokenType::New,
    "INCLUDE" => TokenType::Include,
    "IMPORT" => TokenType::Import,
    "FROM" => TokenType::From,
    "AS" => TokenType::As,
    "LET" => TokenType::Let,
    // "THROW" => TokenType::Throw,
    "TRY" => TokenType::Try,
    "CATCH" => TokenType::Catch,
    "FINALLY" => TokenType::Finally,
    "DECLARE" => TokenType::Declare,
    "LIB" => TokenType::Lib,
    "ALIAS" => TokenType::Alias,
    "::" => TokenType::GetClassMember,
    "TESTPRINT" => TokenType::TestPrint,
    "\0" => TokenType::Eof,
};
