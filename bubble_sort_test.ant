// 冒泡排序算法测试
// 最简单的实现，不需要优化

// 冒泡排序函数
func bubble_sort(arr) {
    let n = len(arr);
    let i = 0;
    
    while (i < n) {
        let j = 0;
        while (j < n - i - 1) {
            if (arr[j] > arr[j + 1]) {
                // 交换元素
                let temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    
    return arr;
}

// 测试函数
func test_bubble_sort() {
    TestPrint "开始测试冒泡排序算法...";
    TestPrint "";
    
    // 测试用例1：普通数组
    let arr1 = [64, 34, 25, 12, 22, 11, 90];
    TestPrint "原始数组1:";
    TestPrint arr1;
    
    let sorted1 = bubble_sort(arr1);
    TestPrint "排序后数组1:";
    TestPrint sorted1;
    TestPrint "";
    
    // 测试用例2：已排序数组
    let arr2 = [1, 2, 3, 4, 5];
    TestPrint "原始数组2:";
    TestPrint arr2;
    
    let sorted2 = bubble_sort(arr2);
    TestPrint "排序后数组2:";
    TestPrint sorted2;
    TestPrint "";
    
    // 测试用例3：逆序数组
    let arr3 = [5, 4, 3, 2, 1];
    TestPrint "原始数组3:";
    TestPrint arr3;
    
    let sorted3 = bubble_sort(arr3);
    TestPrint "排序后数组3:";
    TestPrint sorted3;
    TestPrint "";
    
    // 测试用例4：包含重复元素的数组
    let arr4 = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5];
    TestPrint "原始数组4:";
    TestPrint arr4;
    
    let sorted4 = bubble_sort(arr4);
    TestPrint "排序后数组4:";
    TestPrint sorted4;
    TestPrint "";
    
    TestPrint "冒泡排序测试完成！";
}

// 运行测试
test_bubble_sort();
